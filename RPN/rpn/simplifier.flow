import syntax_tree;

export {
	simplifyTree(ar:ArExp) -> ArExp;
}

simplifyTree(ar:ArExp) -> ArExp {
	//Find simple expression like a^1, a+0, a*0, a-0 etc
	removeTrivialExp(ar);
}

removeTrivialExp(ar:ArExp) -> ArExp {
	getInt = \a -> {
		switch (a) {
			ArInt(val):
				Pair(true, val);
			default:
				Pair(false, 5);
		}
	}

	it = execSimplifier(ar, \op, ar0 -> {

		args = extractArgs(ar0);
		if(length(args) == 2)
		{
			l0 = getInt(args[0]).second;
			r0 = getInt(args[1]).second;

			if(op == "^")
			{
				if(r0 == 0)//x^0
					ArInt(1)
				else if(r0 == 1)//x^1
					args[0]
				else if(l0 == 1)//1^x
					ArInt(1)
				else if(l0 == 0 && getInt(args[1]).first && r0 != 1)//0^x, there we can set it, because of x != 0, it we can find out from the conditions above
					ArInt(0)
				else
					ar0;
			}else if(op == "*")
			{
				if(r0 == 0 || l0 == 0)//x*0 or 0*r
					ArInt(0)
				else if(r0 == 1)//x*1 or 1*x
					args[0]
				else if(l0 == 1)
					args[1]
				else if(args[0] == args[1])
					ArPow(args[0], ArInt(2))
				else
					ar0;	
			}else if(op == "/") {
				if(l0 == 0)// 0/x
					ArInt(0)
				else if(r0 == 1)// x/1
					args[0]
				else if(args[0] == args[1])// x/x
					ArInt(1)
				else 	
					ar0;
			}else if(op == "-") {
				if(args[0] == args[1]) // x-x
					ArInt(0)
				else if(r0 == 0)// x-0
					args[0]
				else
					ar0;
			}else if(op == "+") {
				if(l0 == 0)// 0+x
					args[1]
				else if(r0 == 0)// x+0
					args[0]
				else if(args[0] == args[1]) // x+x = 2x
					ArMult(ArInt(2), args[0])
				else
					ar0;	
			}else
				ar0;
		}else 
			ar0;	
	});	

	if(it == ar)
		it
	else
		removeTrivialExp(it);		
}

execSimplifier(m: ArExp, condOp: (string, ArExp) -> ArExp) -> ArExp {
	arr = extractArgs(m);

	if(length(arr) == 0)
		m
	else 
	{
		newL = detectAndReplace(arr[0], condOp);
		newR = detectAndReplace(arr[1], condOp);

		op = detectType(m);
		condOp(op, createStruct(op, newL, detectAndReplace(arr[1], condOp)));
	}
}

detectAndReplace(ar:ArExp, condOp) -> ArExp {
	switch(ar) {
		ArInt(val): 
			ar;
		ArVar(var):
			ar;
		default:
			execSimplifier(ar, condOp);
	}
}

extractArgs(ar:ArExp) -> [ArExp] {
	switch(ar) {
		ArPow(l, power):
			[l,power];
		ArDiv(up, down): 
			[up,down];
		ArMin(l, r): 
			[l,r];
		ArSum(l, r): 
			[l,r];
		ArMult(l, r): 
			[l,r];
		default:
			[];
	}	
}

detectType(ar: ArExp) -> string {
	switch (ar) {
		ArPow(l, power):
			"^";
		ArDiv(up, down): 
			"/";
		ArMin(l, r): 
			"-";
		ArSum(l, r): 
			"+";
		ArMult(l, r): 
			"*";
		ArInt(val): 
			"int";
		ArVar(var):
			"variable";	
	}
}

createStruct(op: string, l:ArExp, r:ArExp) -> ArExp {
	if(op == "+")
	{
		ArSum(l,r);
	}else if(op == "-")
	{
		ArMin(l,r);
	}else if(op == "*")
	{
		ArMult(l,r);
	}else if(op == "/")
	{
		ArDiv(l,r);
	}else if(op == "^")
	{
		ArPow(l,r);
	}else 
		l;
}