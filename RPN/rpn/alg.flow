import rpn;
import ds/tree;
import sys/system;

export {
	calcSimpleRpn(ar:ArRpn) -> int;
	calcVarRpn(ar:ArRpn, vars: Tree<string, int>) -> int;
}

calcVarRpn(ar:ArRpn, vars: Tree<string, int>) -> int {
	val = foldr(ar.rpn, [0], \acc, rpnn -> {
		len = length(acc);

		if(acc[len-1] > 0)
			acc
		else
		{
			switch(rpnn) {
				RpnOp(id, op):
				{
					if(id == "+") {
						if(len < 2)
							concat(take(acc, len-1), [1])
						else 
							concat([op(acc[0],acc[1])], tailFrom(acc, 2));
					}else 
						if(id == "*") {
							if(len < 2)
								concat(take(acc, len-1), [1])
							else 
								concat([op(acc[0],acc[1])], tailFrom(acc, 2));
						}else
							if(id == "-") {
								if(len < 2)
									concat(take(acc, len-1), [1])
								else 
									concat([op(acc[0],acc[1])], tailFrom(acc, 2));
						}else
							if(id == "/") {
								if(len < 2)
									concat(take(acc, len-1), [1])
								else 
									concat([op(acc[0],acc[1])], tailFrom(acc, 2));
						}else
							if(id == "^") {
								if(len < 2)
									concat(take(acc, len-1), [1])
								else 
									concat([op(acc[0],acc[1])], tailFrom(acc, 2));
						}else
							acc;
				}
				RpnArg(val):
					concat([val], acc);
				RpnVar(var): {
					res = lookupTree(vars, var);
					switch (res) {
							None():
								concat(take(acc, len-1), [2]);
							Some(value):
								concat([value], acc);
					}
				}
			}
		}	
	});

	if(val[length(val)-1] > 0) {
		print("was something wrong during calculating: ");
		if(val[length(val)-1] == 1)
			println("error in the stack due to lack of arguments")
		else if(val[length(val)-1] == 2)
			println("unknown variables!");
		-1;	
	}
	else
		val[0];
}	

calcSimpleRpn(ar:ArRpn) -> int {
	val = foldr(ar.rpn, [0], \acc, rpnn -> {
		len = length(acc);

		if(acc[len-1] > 0)
			acc
		else
		{
			switch(rpnn) {
				RpnOp(id, op):
				{
					if(id == "+") {
						if(len < 2)
							concat(take(acc, len-1), [1])
						else 
							concat([acc[0]+acc[1]], tailFrom(acc, 2));
					}else 
						if(id == "*") {
							if(len < 2)
								concat(take(acc, len-1), [1])
							else 
								concat([acc[0]*acc[1]], tailFrom(acc, 2));
						}else
							acc;
				}
				RpnArg(val):
					concat([val], acc);
				RpnVar(var):
					concat(take(acc, len-1), [2]);
			}
		}	
	});

	if(val[length(val)-1] > 0) {
		print("was something wrong during calculating: ");
		if(val[length(val)-1] == 1)
			println("error in the stack due to lack of arguments")
		else if(val[length(val)-1] == 2)
			println("variables in simple expression!");
		-1;	
	}
	else
		val[0];
}