import lingo/pegcode/driver;

export {
	ArExp ::= ArSum, ArMin, ArDiv, ArPow, ArMult, ArInt, ArVar;
	ArSum(l:ArExp, r:ArExp);
	ArMin(l:ArExp, r:ArExp);
	ArDiv(up:ArExp, down:ArExp);
	ArPow(l:ArExp, pow:ArExp);
	ArMult(l:ArExp, r:ArExp);
	ArInt(val:int);
	ArVar(var:string);

	s2ar(s:string) -> ArExp;
	ar2s(ar:Maybe<ArExp>) -> string;
}

s2ar(s:string) -> ArExp {
	gram="#include syntax_tree_exp.lingo";
	parsic(compilePegGrammar(gram), s, defaultPegActions);
}

ar2s(ar:Maybe<ArExp>) -> string {
	if(isNone(ar))
		"error tree!!!"
	else {
		switch(either(ar, ArInt(0))) {
			ArPow(l, power): 
				concatStrings(["(", ar2s(Some(l)), "^", ar2s(Some(power)), ")"]);
			ArDiv(up, down): 
				concatStrings(["(", ar2s(Some(up)), " / ", ar2s(Some(down)), ")"]);
			ArMin(l, r): 
				concatStrings(["(", ar2s(Some(l)), " - ", ar2s(Some(r)), ")"]);
			ArSum(l, r): 
				concatStrings(["(", ar2s(Some(l)), " + ", ar2s(Some(r)), ")"]);
			ArMult(l, r): 
				concatStrings(["(", ar2s(Some(l)), " * ", ar2s(Some(r)), ")"]);
			ArInt(val): 
				i2s(val);
			ArVar(var):
				var;
		}
	}
}