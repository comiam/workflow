import lingo/pegcode/driver;

export {
	ArExp ::= ArSum, ArMin, ArDiv, ArPow, ArMult, ArInt, ArVar;
	ArSum(l:ArExp, r:ArExp);
	ArMin(l:ArExp, r:ArExp);
	ArDiv(up:ArExp, down:ArExp);
	ArPow(l:ArExp, pow:ArExp);
	ArMult(l:ArExp, r:ArExp);
	ArInt(val:int);
	ArVar(var:string);

	s2ar(s:string) -> ArExp;
	ar2s(ar:ArExp) -> string;
}

s2ar(s:string) -> ArExp {
	gram="#include syntax_tree_exp.lingo";
	parsic(compilePegGrammar(gram), s, defaultPegActions);
}

ar2s(ar:ArExp) -> string {
	switch(ar) {
		ArPow(l, power): 
			concatStrings(["(", ar2s(l), "^", ar2s(power), ")"]);
		ArDiv(up, down): 
			concatStrings(["(", ar2s(up), " / ", ar2s(down), ")"]);
		ArMin(l, r): 
			concatStrings(["(", ar2s(l), " - ", ar2s(r), ")"]);
		ArSum(l, r): 
			concatStrings(["(", ar2s(l), " + ", ar2s(r), ")"]);
		ArMult(l, r): 
			concatStrings(["(", ar2s(l), " * ", ar2s(r), ")"]);
		ArInt(val): 
			i2s(val);
		ArVar(var):
			var;
	}
}